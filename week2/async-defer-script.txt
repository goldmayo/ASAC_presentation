안녕하세요 async defer에 대해 발표할 C조 워커입니다.

목차부터 소개하겠습니다

스크립트 로딩 전략
예시
정리
---
이미 알고계신 분들도 계시곘지만

우선 동기 비동기에 대한 설명을 간략히 하겠습니다.

동기적인 상황은 한 작업이 끝날 때까지 다른 작업을 시작하지 않는 것이고,
비동기적인 상황은 한 작업을 기다리지 않고 다른 작업을 시작하는 것입니다.

우리의 일상에서 찾아보면
컵라면에 물을 붓고 3분 기다리는 사이
여러분은 아무것도 하지 않고 기다리거나
기다리는 동안 다른 일을 합니다

전자는 동기 후자는 비동기입니다.
---
HTML5 이전 웹은 동기적인 모델로서 HTML과 CSS를 파싱하고 DOM트리와
CSSOM트리를 만들고 JS를 실행하는데요

스크립트 태그의 위치에 따라 HTML 또는 CSS의 파싱이 중간에 블로킹되어
렌더링이 중단되는 등 앱의 성능이 달라지거나 사용자에게 부정적인 경험을
줄 수 있습니다.

script 태그 배치 전략을 알아 보겠습니다.

실행부터 종료까지 약 3초가 걸리는 스크립트 태그를 로딩하는
4가지 상황이 있습니다

첫 번째, 헤드 태그 내부에 스크립트 태그를 로드하는 경우입니다.
어떤 문제가 있을까요?
랜딩 페이지 접속시 자바스크립트가 먼저 다운받아지고 평가되어 3초가 지나서야
AB를 화면에 렌더링될 것 입니다.

두 번째, 헤드 태그 내부에서 문서 내부의 모든 H1 태그를 참조하는 코드가 보입니다.
다들 예상한 대로 참조에러가 발생할 것 입니다.
아직 생성되지도 않은 요소를 참조할 수 없으니까요

세 번째 바디 태그 중간에서 스크립트 태그를 로드하는 경우입니다.
어떻게 될까요? A가 화면에 렌더링되고 스크립트를 다운받고 평가하는 시간동안
HTML 파싱이 블로킹되어 3초 뒤 스크립트의 평가가 끝나고서 B가 렌더링됩니다.

마지막 네 번째, 바디 태그 최하단에 스크립트 태그를 로드하는 경우입니다.
AB가 화면에 렌더링되고 JS를 다운받고 평가합니다

이 네가지 예시들은 모두 동기적으로 JS를 다운로드하고 평가하는 방법입니다.
예시에서 나타난 문제를 해결하기 위해서 스크립트 태그에 
비동기적으로 JS를 다운로드하고 평가하는 속성 defer와 async가 HTML5부터
지원되고 있습니다.
---
우선 동기적인 스크립트 로딩 과정을 시각적으로 보겠습니다.

HTML파싱 도중 스크립트 태그를 만나면 HTML파싱을 중단하고
JS를 다운로드하고 평가합니다. 평가가 끝나고 나서 다시 HTML을 파싱합니다.

이전 예시에서 봤던 중간에 블로킹되는 영역이 생겨 렌더링 시간이 지연되는
문제가 보입니다.

비동기 속성인 defer와 async를 보겠습니다.

defer는 HTML을 파싱하는 도중 스크립트 테그를 만나면 파싱작업을 중단하지 않고
순차적으로 스크립트 태그에 명시한 JS를 다운로드합니다.
그리고 모든 HTML 파싱이 완료되고 나서 JS를 평가합니다.

async 또한 HTML을 파싱하는 도중 스크립트 테그를 만나면 
파싱작업을 중단하지 않고 스크립트 태그에 명시한 JS를 다운로드하고 바로 실헹합니다.
하지만 defer와 다르게 다운로드가 빨리 끝난 JS 부터 평가하며 순차적인 실행을 보장하지 않습니다.
또한 DOM을 조작하거나 다른 스크립트 모듈에 의존성이 있는 경우 참조 오류가 생길 여지가
있습니다.
---
defer와 async를 표로 정리하겠습니다.

무조건 defer가 좋은가 라고 할 수 는 없습니다.
광고 또는 외부 통계용 스크립트는 async 속성을 사용하는게 성능측면에서 유리합니다.

이상으로 <script> 요소를 HTML 문서 상에서 어디에 위치시키는지에 따라 
웹 페이지의 로딩 속도에 어떤 영향을 미칠 수가 있는지 알아보았습니다.
자바스크립트 파일의 다운로드와 자바스크립트 코드의 실행을 최적화하는데 
도움이 될 수 있는 <script> 요소의 defer 속성과 async 속성에 대해서도 
살펴보았습니다.

defer 속성과 async 속성을 적절히 활용하셔서 웹사이트 성능과
사용자 경험 향상에 도움이 될 수 있으셨으면 좋겠습니다.